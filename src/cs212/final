<!DOCTYPE html>
<html>
<head>
  <title>Lights Out</title>
  <style>
    /* CSS styles for game layout */
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: black;
      flex-direction: column;
      color: white;
      font-family: Arial, sans-serif;
    }
    h1 {
      margin-bottom: 20px;
    }
    .container {
      display: grid;
      grid-template-columns: repeat(5, 50px);
      grid-gap: 5px;
      justify-content: center;
      align-items: center;
    }
    .cell {
      width: 50px;
      height: 50px;
      background-color: purple;
      border: 1px solid white;
      cursor: pointer;
    }
    .restart-btn {
      margin-top: 20px;
      text-align: center;
    }
    .restart-btn button {
      padding: 10px 20px;
      background-color: white;
      color: black;
      border: 1px solid white;
      cursor: pointer;
    }
    .restart-btn button:hover {
      background-color: black;
      color: white;
    }
    /* Addendum styles */
    .addendum {
      margin-top: 30px;
      border-top: 1px solid white;
      padding-top: 20px;
    }
    .addendum h2 {
      margin-bottom: 10px;
    }
    .addendum p {
      margin-bottom: 15px;
    }
  </style>
</head>
<body>

<h1>Lights Out</h1>

<div class="container" id="board"></div>
<div class="restart-btn">
  <button onclick="restartGame()">Restart</button>
</div>

<script>
  const boardSize = 5;
  let board = [];

  // Create a random solvable board
  function createBoard() {
    board = [];
    for (let i = 0; i < boardSize; i++) {
      board[i] = [];
      for (let j = 0; j < boardSize; j++) {
        board[i][j] = Math.random() > 0.5 ? 1 : 0;
      }
    }
  }

  // Check if the board is solved
  function isSolved() {
    return board.every(row => row.every(cell => cell === 0));
  }

  // Toggle the lights when a cell is clicked
  function toggleCell(row, col) {
    board[row][col] ^= 1;
    if (row > 0) board[row - 1][col] ^= 1;
    if (row < boardSize - 1) board[row + 1][col] ^= 1;
    if (col > 0) board[row][col - 1] ^= 1;
    if (col < boardSize - 1) board[row][col + 1] ^= 1;
  }

  // Render the board
  function renderBoard() {
    const boardElement = document.getElementById('board');
    boardElement.innerHTML = '';
    for (let i = 0; i < boardSize; i++) {
      for (let j = 0; j < boardSize; j++) {
        const cell = document.createElement('div');
        cell.className = 'cell';
        if (board[i][j] === 1) cell.style.backgroundColor = 'white';
        cell.addEventListener('click', () => {
          toggleCell(i, j);
          renderBoard();
          if (isSolved()) {
            window.alert('Congratulations! You win the game!');
            createBoard();
            renderBoard();
          }
        });
        boardElement.appendChild(cell);
      }
    }
  }

  // Initialize the game
  createBoard();
  renderBoard();

  // Restart the game
  function restartGame() {
    createBoard();
    renderBoard();
  }
</script>

<!-- Addendum explaining the code -->
<div class="addendum">
  <h2>Explanation:</h2>
  <p>
    The CSS styles define the layout and appearance of the Lights Out game. The body is set as a flex container, centering its content both horizontally and vertically. The game grid is created using CSS grid layout, with each cell having a fixed width, height, and styling to represent the initial state of the game.
  </p>
  <p>
    The restart button is styled using CSS to ensure it matches the game theme. It allows the player to restart the game by calling the 'restartGame()' function in the JavaScript code.
  </p>
  <p>
    JavaScript functions handle game logic, from generating the initial board to checking for a win after each move. The game board is rendered dynamically using JavaScript based on the current state of the board.
  </p>
</div>

</body>
</html>
